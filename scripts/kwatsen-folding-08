   #!/bin/bash

   print_usage() {
     echo
     echo "Folds the text file, only if needed, at the specified"
     echo "column, according to BCP XX."
     echo
     echo "Usage: $0 [-c <col>] [-r] -i <infile> -o <outfile>"
     echo
     echo "  -c: column to fold on (default: 69)"
     echo "  -r: reverses the operation"
     echo "  -i: the input filename"
     echo "  -o: the output filename"
     echo "  -d: show debug messages"
     echo "  -h: show this message"
     echo
     echo "Exit status code: zero on success, non-zero otherwise."
     echo
   }


   # global vars, do not edit
   debug=0
   reversed=0
   infile=""
   outfile=""
   maxcol=69  # default, may be overridden by param
   hdr_txt="NOTE: '\\\\' line wrapping per BCP XX (RFC XXXX)"
   equal_chars="=============================================="
   space_chars="                                              "

   fold_it() {
     # since upcomming tests are >= (not >)
     testcol=`expr "$maxcol" + 1`

     # check if file needs folding
     grep ".\{$testcol\}" $infile >> /dev/null 2>&1
     if [ $? -ne 0 ]; then
       if [[ $debug -eq 1 ]]; then
         echo "nothing to do"
       fi
       cp $infile $outfile
       return -1
     fi

     foldcol=`expr "$maxcol" - 1` # for the inserted '\' char

     # ensure input file doesn't contain a TAB
     grep "\t" $infile >> /dev/null 2>&1
     if [ $? -eq 0 ]; then
       echo
       echo "Error: infile contains a TAB character, which is not allowed."
       echo
       return 1
     fi

     # ensure input file doesn't contain the fold-sequence already
     pcregrep -M  "\\\\\n[\ ]*\\\\" $infile >> /dev/null 2>&1
     if [ $? -eq 0 ]; then
       echo
       echo "Error: infile has a line ending with a '\' character followed"
       echo "       by '\' as the first non-space character on the next line."
       echo "       This file cannot be folded."
       echo
       return 1
     fi

     # center header text
     length=`expr ${#hdr_txt} + 2`
     left_sp=`expr \( "$maxcol" - "$length" \) / 2`
     right_sp=`expr "$maxcol" - "$length" - "$left_sp"`
     header=`printf "%.*s %s %.*s" "$left_sp" "$equal_chars" "$hdr_txt" "$right_sp" "$equal_chars"`

     # fold using recursive passes ('g' didn't work)
     if [ -z "$1" ]; then
       # init recursive env
       cp $infile /tmp/wip
     fi
     gsed "/.\{$testcol\}/s/\(.\{$foldcol\}\)/\1\\\\\n\\\\/" < /tmp/wip >> /tmp/wip2
     diff /tmp/wip /tmp/wip2 > /dev/null 2>&1
     if [ $? -eq 1 ]; then
       mv /tmp/wip2 /tmp/wip
       fold_it "recursing"
     else
       echo "$header" > $outfile
       echo "" >> $outfile
       cat /tmp/wip2 >> $outfile
       rm /tmp/wip*
     fi

     ## following two lines represent a non-functional variant to the recursive
     ## logic presented in the block above.  It used to work before the '\'
     ## on the next line was added to the format (i.e., the trailing '\\\\'
     ## in the substitution below), but now there is an off-by-one error.
     ## Leaving here in case anyone can fix it.
     #echo "$header" > $outfile
     #echo "" >> $outfile
     #gsed "/.\{$testcol\}/s/\(.\{$foldcol\}\)/\1\\\\\n\\\\/g" < $infile >> $outfile

     return 0
   }


   unfold_it() {
     # check if file needs unfolding
     line=`head -n 1 $infile | fgrep "$hdr_txt"`
     if [ $? -ne 0 ]; then
       if [[ $debug -eq 1 ]]; then
         echo "nothing to do"
       fi
       cp $infile $outfile
       return -1
     fi

     # output all but the first two lines (the header) to wip (work in progress) file
     awk "NR>2" $infile > /tmp/wip

     # unfold wip file
     gsed ":x; /.*\\\\\$/N; s/\\\\\n[ ]*\\\\//; tx; s/\t//g" /tmp/wip > $outfile

     # clean up and return
     rm /tmp/wip
     return 0
   }

   process_input() {
     while [ "$1" != "" ]; do
       if [ "$1" == "-h" -o "$1" == "--help" ]; then
         print_usage
         exit 1
       fi
       if [ "$1" == "-d" ]; then
         debug=1
       fi
       if [ "$1" == "-c" ]; then
         maxcol="$2"
         shift
       fi
       if [ "$1" == "-r" ]; then
         reversed=1
       fi
       if [ "$1" == "-i" ]; then
         infile="$2"
         shift
       fi
       if [ "$1" == "-o" ]; then
         outfile="$2"
         shift
       fi
       shift
     done

     if [ -z "$infile" ]; then
       echo
       echo "Error: infile parameter missing (use -h for help)"
       echo
       exit 1
     fi

     if [ -z "$outfile" ]; then
       echo
       echo "Error: outfile parameter missing (use -h for help)"
       echo
       exit 1
     fi

     if [ ! -f "$infile" ]; then
       echo
       echo "Error: specified file \"$infile\" is does not exist."
       echo
       exit 1
     fi

     min_supported=`expr ${#hdr_txt} + 8`
     if [ $maxcol -lt $min_supported ]; then
       echo
       echo "Error: the folding column cannot be less than $min_supported"
       echo
       exit 1
     fi

     max_supported=`expr ${#equal_chars} + 1 + ${#hdr_txt} + 1 + ${#equal_chars}`
     if [ $maxcol -gt $max_supported ]; then
       echo
       echo "Error: the folding column cannot be more than $max_supported"
       echo
       exit 1
     fi

   }


   main() {
     if [ "$#" == "0" ]; then
        print_usage
        exit 1
     fi

     process_input $@

     if [[ $reversed -eq 0 ]]; then
       fold_it
       code=$?
     else
       unfold_it
       code=$?
     fi
     exit $code
   }

main "$@"
