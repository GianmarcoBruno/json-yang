#!/bin/bash
# gianmarco.bruno@ericsson.com, carlo.perocchio@ericsson.com

if [ -z "$2" ]
then
    echo "usage: [FETCH='y'] validate <JSON_FILE> <WHAT> [<YANG_DIR>]"
    echo "WHAT one of: data, config"
    echo "YANG_DIR is the local directory unless specified"
    echo "if FETCH is specified, validation is made using modules"
    echo "specified in the JSON as e.g.:"
    echo "\"// __REFERENCE_DRAFTS__\": {
    \"ietf-network@2017-12-18\": \"draft-ietf-i2rs-yang-network-topo-20\"",
    echo ""
    echo "exiting: did nothing"
    exit 1
fi

JSON_FILE=$1
WHAT=$2
YANG_DIR=${3-.}
THIS_SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

function all_yang_files_in_dir {
    ALL_YANG_FILES="`ls ${YANG_DIR}/*.yang`"
}

function exit_if_failed {
    if [ $? -ne 0 ]
    then
	    echo $1
	    exit 1
    fi
}

function fetch_yang_models {
    if [ -z "$FETCH" ]
    then
        echo "..will use local models for validation"
    else
        echo "..will download models from the network"
        $THIS_SCRIPT_DIR/scripts/fetchModels $1
    fi
}

# pseudo-comments has been provisionally defined in the IETF TEAS Transport NBI
# Design Team in JSON as fictitious key/value pairs on a single line:
# "// TEXT" :" OTHER TEXT", for example "// router-id": "NODE-S3-ID"

function cleanup {
    rm -f *.sch *.jtox *.rng *.dsrl *.tmp
}

echo "(0) cleaning .."
cleanup

echo "(0) building list of all yang files"
fetch_yang_models $JSON_FILE
# results are in $ALL_YANG_FILES
all_yang_files_in_dir $YANG_DIR
exit_if_failed "unable to write list of yang files (perhaps empty?)"
sed "s/ /\n/g" <<< $ALL_YANG_FILES

echo "(1) writing jtox .."
JTOX_FILE=_temporary.jtox
pyang -p . -f jtox -o $JTOX_FILE $ALL_YANG_FILES
exit_if_failed "writing jtox"

echo "preparing step (2) stripping pseudo-comments from JSON .."
# we want to keep the original JSON unchanged
JSON_TMP=${JSON_FILE}.tmp
python $THIS_SCRIPT_DIR/scripts/Stripper.py -i=${JSON_FILE} -o=${JSON_TMP} --clean
exit_if_failed "stripping comments"

echo "(2) converting JSON to XML .."
XML_BASE=${JSON_FILE%.json}
XML_TMP=${XML_BASE}_tmp.xml
XML_FILE=${XML_BASE}.xml
json2xml -t $WHAT -o $XML_TMP $JTOX_FILE $JSON_TMP
exit_if_failed "converting JSON to XML"

python $THIS_SCRIPT_DIR/scripts/xml2pretty.py -i $XML_TMP -o $XML_FILE
exit_if_failed "beautifying XML"
rm $XML_TMP

echo "(3) writing schemas .."
yang2dsdl -t $WHAT -b _placeholder $ALL_YANG_FILES
exit_if_failed "writing schemas"

echo "(4) validating XML .."
yang2dsdl -s -j -b _placeholder -t $WHAT -v $XML_FILE
exit_if_failed "validation"

# do not write anything on stdout otherwise
# the test driver gets confused
cleanup
