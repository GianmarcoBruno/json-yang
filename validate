#!/bin/bash
# gianmarco.bruno@gmail.com, carlo.perocchio@gmail.com

declare -A IETF_URL=( [rfc]="https://www.rfc-editor.org/rfc" \
                      [id]="https://tools.ietf.org/id" )

function print_usage {
    echo "usage: validate -j <JSON_FILE> -w <WHAT> [options]"
    echo ""
    echo "JSON_FILE is a document annotated with references and models like:"
    echo '"// header": {'
    echo '  " reference-drafts": {'
    echo '    "ietf-routing-types@2017-12-04": "rfc8294",'
    echo '    "ietf-te-types@2019-07-05": "draft-ietf-teas-yang-te-types-10",'
    echo '    "ietf-eth-tran-types@2019-03-27": "draft-ietf-ccamp-client-signal-yang-00",'
    echo '    "ietf-eth-tran-service@2019-03-27": "draft-ietf-ccamp-client-signal-yang-00"'
    echo '   }'
    echo ' },'
    echo ""
    echo "WHAT is one of: data, config"
    echo ""
    echo "options:"
    echo "-m M1 -m M2 .. are the directories where models are looked for (the rightmost wins)"
    echo "-f fetch to 'downloads' directory the cited documents and models (default false)"
    echo "-k keep target directory (default false)"
    echo "-v verbose"
    echo ""
    echo "this is jy  $JY_VERSION"
    echo "and libyang $LIBYANG_VERSION"
    echo ""
    echo "exiting: did nothing"
    exit 2
}

# global vars and their defaults
JSON_FILE=""
WHAT=""
TARGET_DIR=target
YANGLINT_CODE=$TARGET_DIR/yanglint.cmd
MODELS_DIR=""
DOWNLOAD_DIR=downloads
FETCH=false
KEEP=false
VERBOSE=false

function exit_if_failed {
    if [ $? -ne 0 ]
    then
        cleanup
        echo "failed during $1"
        exit 1
    fi
}

# usage: fetch_model $fragment $model $document
function fetch_model {
    kind=$1
    model=$2
    name=$3

    full_name="${name}.txt"
    curl -s "${IETF_URL[$kind]}/${full_name}" --output "${DOWNLOAD_DIR}/${full_name}"
    rfcstrip -d "$DOWNLOAD_DIR" -f "${model}.yang" "${DOWNLOAD_DIR}/${full_name}"
}

# usage: fetch_models $JSON_FILE
function fetch_models {
    mkdir -p "$DOWNLOAD_DIR"
    models=$(jq -r '."// header"."reference-drafts" | keys[]' "$1")
    for model in $models; do
        echo "fetching model $model"
        document=$(jq -r --arg M "$model" '."// header"."reference-drafts"[$M]' "$1")
        echo "fetching document $document"
        if [[ x$document =~ xrfc-* ]]; then
	    fetch_model "rfc" "$model" "$document"
	elif [[ x$document =~ xdraft-* ]]; then
	    fetch_model "id" "$model" "$document"
	else
	    echo "$document is not a valid IETF rfc or id name"
	    exit 1
	fi
    done
}

function cleanup {
    [ $KEEP = true ] || rm -rf $TARGET_DIR
}

function process_args {
     while (( "$#" )); do
         case "$1" in
         -h)
             print_usage
             ;;
         -j)
             JSON_FILE="$2"
             shift 2
             ;;
         -m)
             MODELS_DIR="$MODELS_DIR $2"
             shift 2
             ;;
         -w)
             WHAT="$2"
             shift 2
             ;;
         -f)
             FETCH=true
             shift
             ;;
         -k)
             KEEP=true
             shift
             ;;
         -v)
             VERBOSE=true
             shift
             ;;
         -*)
             echo "unrecognized input $1"
             print_usage
             exit 1
             ;;
         esac
     done
     [ -z "$JSON_FILE" ] && print_usage
     [ -z "$WHAT" ] && print_usage
}

function validate_yanglint {
    JSON_FILE=$1

    JSON_STRIPPED=${TARGET_DIR}/${JSON_FILE%.json}-stripped.json
    cp "$JSON_FILE" "$JSON_STRIPPED"

    echo "searchpath ${TARGET_DIR}" >> "$YANGLINT_CODE"
    for i in $ALL_YANG_FILES; do
        echo "add -i $i" >> "$YANGLINT_CODE"
    done
    echo "data -t $WHAT $JSON_STRIPPED" >> "$YANGLINT_CODE"
    echo "exit" >> "$YANGLINT_CODE"

    [ $VERBOSE = true ] && echo "<<<" && cat "$YANGLINT_CODE" && echo ">>>"

    # strip comments
    jq 'walk(if type == "object" then with_entries(select(.key | test("^// ") | not)) else . end)' \
        "$JSON_FILE" > "$JSON_STRIPPED"
    exit_if_failed "stripping comments"

    # the contract with yanglint is that validation is OK iff
    # nothing is written on STDERR so we capture and check it
    # and our testsuite currently expects the magic string
    # "No errors found." to be happy
    ANSWER=$(yanglint < "$YANGLINT_CODE" 2>&1)

    EXIT_CODE=0
    if [ "z$ANSWER" == "z" ]; then
        >&2 echo "No errors found."
    else
        echo "$ANSWER"
        EXIT_CODE=1
    fi
    return $EXIT_CODE
}

function print_intro {
    echo "----------------"
    echo "JSON FILE      $JSON_FILE"
    echo "WHAT           $WHAT"
    echo "-- behaviours --"
    echo "KEEP TARGET    $KEEP"
    echo "FETCH          $FETCH"
    echo "-- places --"
    echo "DOWNLOAD DIR   $DOWNLOAD_DIR"
    echo "MODELS DIR     $MODELS_DIR"
    echo "TARGET DIR     $TARGET_DIR"
    echo "----------------"
}

function prepare_target_directory {
    for THIS_MODELS_DIR in $MODELS_DIR; do
        [ $VERBOSE == "true" ] && echo "using models in $THIS_MODELS_DIR"
        MODELS=$(ls "$THIS_MODELS_DIR"/*.yang 2> /dev/null)
        [ -z "$MODELS" ] && echo "warning: no models in $THIS_MODELS_DIR"
        cp "$THIS_MODELS_DIR"/*.yang -t "$TARGET_DIR" 2> /dev/null
    done

    ALL_YANG_FILES="$(ls "${TARGET_DIR}"/*.yang 2> /dev/null)"
    [ -z "$ALL_YANG_FILES" ] && echo "no yang files in $TARGET_DIR to be evaluated" && cleanup && exit 2
}

function main {
    process_args "$@"

    [ $VERBOSE = true ] && print_intro

    [ -d "$TARGET_DIR" ] && echo "target directory exists .. exiting" exit 2
    mkdir "$TARGET_DIR"

    # fetch models to $DOWNLOAD_DIR
    if [ $FETCH == "true" ]; then
        rm -rf $DOWNLOAD_DIR && mkdir -p $DOWNLOAD_DIR
        [ $VERBOSE == "true" ] && echo "download references and models to $DOWNLOAD_DIR"
        fetch_models "$JSON_FILE"
    fi


    # copy yang files from all model directories
    prepare_target_directory

    validate_yanglint "$JSON_FILE"
    exit_if_failed "validation"

    # do not write anything on stdout on purpose
    cleanup
    return 0
}


main "$@"
