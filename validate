#!/bin/bash
# gianmarco.bruno@ericsson.com, carlo.perocchio@ericsson.com

print_usage() {
    echo "usage: validate -j <JSON_FILE> -w <WHAT> [-y <YANG_DIR>] [-f]"
    echo "WHAT one of: data, config"
    echo "YANG_DIR is the local directory unless specified"
    echo "if -f (FETCH) is specified, validation is made using modules"
    echo "specified in the JSON as e.g.:"
    echo "\"// __REFERENCE_DRAFTS__\": {
    \"ietf-network@2017-12-18\": \"draft-ietf-i2rs-yang-network-topo-20\"",
    echo ""
    echo "exiting: did nothing"
    exit 1
}

JSON_FILE=""
WHAT=""
YANG_DIR=""
: YANG_DIR=${YANG_DIR:=.}
THIS_SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
TEMP_DIR=$(mktemp -d)
FETCH=false

# to suppress pushd/popd messages
pushd () {
    command pushd "$@" > /dev/null
}

popd () {
    command popd "$@" > /dev/null
}

function all_yang_files_in_dir {
    ALL_YANG_FILES="`ls ${YANG_DIR}/*.yang`"
}

function exit_if_failed {
    if [ $? -ne 0 ]
    then
        echo $1
        exit 1
    fi
}

function fetch_yang_models {
    if [ "$FETCH" = true ]
    then
        echo "..will download models from the network"
        $THIS_SCRIPT_DIR/scripts/fetchModels $1
    else
        echo "..will use local models for validation"
    fi
}

# pseudo-comments has been provisionally defined in the IETF TEAS Transport NBI
# Design Team in JSON as fictitious key/value pairs on a single line:
# "// TEXT" :" OTHER TEXT", for example "// router-id": "NODE-S3-ID"

function cleanup {
    rm -rf $TEMP_DIR
}

process_args() {
     while [ "$1" != "" ]; do
       if [ "$1" == "-h" -o "$1" == "--help" ]; then
         print_usage
         exit 1
       fi
       if [ "$1" == "-j" ]; then
         JSON_FILE="$2"
       fi
       if [ "$1" == "-y" ]; then
         YANG_DIR="$2"
         shift
       fi
       if [ "$1" == "-f" ]; then
         FETCH=true
         shift
       fi
       if [ "$1" == "-w" ]; then
         WHAT="$2"
         shift
       fi
       shift
     done
}

main() {
    if [ "$#" == "0" ]; then
        print_usage
        exit 1
    fi

    process_args $@

    echo "(0) building list of all yang files"
    fetch_yang_models $JSON_FILE
    # results are in $ALL_YANG_FILES
    all_yang_files_in_dir $YANG_DIR
    exit_if_failed "unable to write list of yang files (perhaps empty?)"
    sed "s/ /\n/g" <<< $ALL_YANG_FILES

    echo "(1) writing jtox .."
    JTOX_FILE=$TEMP_DIR/_temporary.jtox
    pyang -p $YANG_DIR -f jtox -o $JTOX_FILE $ALL_YANG_FILES
    exit_if_failed "writing jtox"

    echo "preparing step (2) stripping pseudo-comments from JSON .."
    # we want to keep the original JSON unchanged
    JSON_TMP=${TEMP_DIR}/$(basename $JSON_FILE)
    python $THIS_SCRIPT_DIR/scripts/Stripper.py -i=${JSON_FILE} -o=${JSON_TMP} --clean
    exit_if_failed "stripping comments"

    echo "(2) converting JSON to XML .."
    XML_BASE=$(basename ${JSON_FILE%.json})
    XML_TMP=$TEMP_DIR/${XML_BASE}_tmp.xml
    XML_FILE=$TEMP_DIR/${XML_BASE}.xml
    json2xml -t $WHAT -o $XML_TMP $JTOX_FILE $JSON_TMP
    exit_if_failed "converting JSON to XML"

    xmllint --format $XML_TMP > $XML_FILE
    exit_if_failed "beautifying XML"
    rm $XML_TMP

    echo "(3) writing schemas .."
    # It seems that yang2dsdl wants the yang modules in the dir it was called from
    # So we move temporarily there and then resume from the current directory.

    CWD=$(pwd)
    pushd .
    cd $YANG_DIR
    pwd
    yang2dsdl -t $WHAT -d $TEMP_DIR -b _placeholder *.yang
    popd
    exit_if_failed "writing schemas"

    echo "(4) validating XML .."
    # For same purpose we move temporarily to the directory where the schemas are placed.

    pushd .
    cd $TEMP_DIR
    yang2dsdl -s -j -b _placeholder -t $WHAT -v $XML_FILE
    popd
    exit_if_failed "validation"

    # do not write anything on stdout otherwise
    # the test driver gets confused
    cleanup
    return 0
}

main "$@"
